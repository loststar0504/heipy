
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import de.unihd.dbs.uima.annotator.heideltime.resources
import de.unihd.dbs.uima.types.heideltime
import java.io
import java.lang
import java.util
import jpype.protocol
import org.apache.uima
import org.apache.uima.analysis_component
import org.apache.uima.cas
import org.apache.uima.jcas
import typing



class TreeTaggerProcess:
    def __init__(self, process: java.lang.Process): ...
    def close(self) -> None: ...
    def getStdin(self) -> java.io.BufferedWriter: ...
    def getStdout(self) -> java.io.BufferedReader: ...

class TreeTaggerProperties:
    FLUSH_SEQUENCE: typing.ClassVar[str] = ...
    STARTOFTEXT: typing.ClassVar[str] = ...
    ENDOFTEXT: typing.ClassVar[str] = ...
    languageName: str = ...
    rootPath: str = ...
    tokScriptName: str = ...
    parFileName: str = ...
    abbFileName: str = ...
    languageSwitch: str = ...
    utf8Switch: str = ...
    newLineSeparator: str = ...
    fileSeparator: str = ...
    chineseTokenizerPath: java.io.File = ...
    def __init__(self): ...
    def getChineseTokenizationProcess(self) -> java.lang.Process: ...
    def getTokenizationProcess(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> java.lang.Process: ...
    @typing.overload
    def getTreeTaggingProcess(self) -> java.lang.Process: ...
    @typing.overload
    def getTreeTaggingProcess(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> java.lang.Process: ...

class TreeTaggerReader(java.lang.Runnable):
    def __init__(self, list: java.util.List[de.unihd.dbs.uima.types.heideltime.Token], bufferedReader: java.io.BufferedReader, jCas: org.apache.uima.jcas.JCas, boolean: bool): ...
    def run(self) -> None: ...

class TreeTaggerTokenizer:
    def __init__(self, string: str, enumSet: java.util.EnumSet['TreeTaggerTokenizer.Flag']): ...
    def tokenize(self, string: str) -> java.util.List[str]: ...
    class Flag(java.lang.Enum['TreeTaggerTokenizer.Flag']):
        ENGLISH: typing.ClassVar['TreeTaggerTokenizer.Flag'] = ...
        FRENCH: typing.ClassVar['TreeTaggerTokenizer.Flag'] = ...
        ITALIAN: typing.ClassVar['TreeTaggerTokenizer.Flag'] = ...
        GALICIAN: typing.ClassVar['TreeTaggerTokenizer.Flag'] = ...
        Z: typing.ClassVar['TreeTaggerTokenizer.Flag'] = ...
        @staticmethod
        def getSet(string: str) -> java.util.EnumSet['TreeTaggerTokenizer.Flag']: ...
        _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'TreeTaggerTokenizer.Flag': ...
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
        @staticmethod
        def values() -> typing.MutableSequence['TreeTaggerTokenizer.Flag']: ...

class TreeTaggerWrapper(org.apache.uima.analysis_component.JCasAnnotator_ImplBase):
    PARAM_LANGUAGE: typing.ClassVar[str] = ...
    PARAM_ANNOTATE_TOKENS: typing.ClassVar[str] = ...
    PARAM_ANNOTATE_SENTENCES: typing.ClassVar[str] = ...
    PARAM_ANNOTATE_PARTOFSPEECH: typing.ClassVar[str] = ...
    PARAM_IMPROVE_GERMAN_SENTENCES: typing.ClassVar[str] = ...
    PARAM_CHINESE_TOKENIZER_PATH: typing.ClassVar[str] = ...
    def __init__(self): ...
    @typing.overload
    def initialize(self, language: de.unihd.dbs.uima.annotator.heideltime.resources.Language, string: str, boolean: bool, boolean2: bool, boolean3: bool, boolean4: bool) -> None: ...
    @typing.overload
    def initialize(self, language: de.unihd.dbs.uima.annotator.heideltime.resources.Language, string: str, boolean: bool, boolean2: bool, boolean3: bool, boolean4: bool, string2: str) -> None: ...
    @typing.overload
    def initialize(self, uimaContext: org.apache.uima.UimaContext) -> None: ...
    @typing.overload
    def process(self, jCas: org.apache.uima.jcas.JCas) -> None: ...
    @typing.overload
    def process(self, abstractCas: typing.Union[org.apache.uima.cas.AbstractCas, typing.Callable]) -> None: ...
    def quit(self) -> None: ...
    def setHome(self, string: str) -> None: ...

class TreeTaggerWriter(java.lang.Runnable):
    def __init__(self, list: java.util.List[str], bufferedWriter: java.io.BufferedWriter): ...
    def run(self) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("de.unihd.dbs.uima.annotator.treetagger")``.

    TreeTaggerProcess: typing.Type[TreeTaggerProcess]
    TreeTaggerProperties: typing.Type[TreeTaggerProperties]
    TreeTaggerReader: typing.Type[TreeTaggerReader]
    TreeTaggerTokenizer: typing.Type[TreeTaggerTokenizer]
    TreeTaggerWrapper: typing.Type[TreeTaggerWrapper]
    TreeTaggerWriter: typing.Type[TreeTaggerWriter]
