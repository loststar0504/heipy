
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import de.unihd.dbs.uima.annotator.heideltime
import org.apache.uima
import org.apache.uima.jcas
import typing



class GenericProcessor:
    def __init__(self): ...
    def initialize(self, uimaContext: org.apache.uima.UimaContext) -> None: ...
    def process(self, jCas: org.apache.uima.jcas.JCas) -> None: ...

class ProcessorInitializationException(de.unihd.dbs.uima.annotator.heideltime.HeidelTimeException):
    def __init__(self): ...

class ProcessorProcessingException(de.unihd.dbs.uima.annotator.heideltime.HeidelTimeException):
    def __init__(self): ...

class TemponymPostprocessing:
    def __init__(self): ...
    @staticmethod
    def handleIntervals(jCas: org.apache.uima.jcas.JCas) -> None: ...

class DecadeProcessor(GenericProcessor):
    def __init__(self): ...
    def evaluateFunctions(self, jCas: org.apache.uima.jcas.JCas) -> None: ...
    def initialize(self, uimaContext: org.apache.uima.UimaContext) -> None: ...
    def process(self, jCas: org.apache.uima.jcas.JCas) -> None: ...

class HolidayProcessor(GenericProcessor):
    def __init__(self): ...
    def evaluateCalculationFunctions(self, jCas: org.apache.uima.jcas.JCas) -> None: ...
    @typing.overload
    def getEasterSunday(self, int: int) -> str: ...
    @typing.overload
    def getEasterSunday(self, int: int, int2: int) -> str: ...
    @typing.overload
    def getEasterSundayOrthodox(self, int: int) -> str: ...
    @typing.overload
    def getEasterSundayOrthodox(self, int: int, int2: int) -> str: ...
    def getShroveTideWeekOrthodox(self, int: int) -> str: ...
    def getWeekdayOfMonth(self, int: int, int2: int, int3: int, int4: int) -> str: ...
    def getWeekdayRelativeTo(self, string: str, int: int, int2: int, boolean: bool) -> str: ...
    def initialize(self, uimaContext: org.apache.uima.UimaContext) -> None: ...
    def process(self, jCas: org.apache.uima.jcas.JCas) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("de.unihd.dbs.uima.annotator.heideltime.processors")``.

    DecadeProcessor: typing.Type[DecadeProcessor]
    GenericProcessor: typing.Type[GenericProcessor]
    HolidayProcessor: typing.Type[HolidayProcessor]
    ProcessorInitializationException: typing.Type[ProcessorInitializationException]
    ProcessorProcessingException: typing.Type[ProcessorProcessingException]
    TemponymPostprocessing: typing.Type[TemponymPostprocessing]
