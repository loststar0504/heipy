
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import java.util
import java.util.regex
import org.apache.uima.cas
import org.apache.uima.collection
import org.apache.uima.jcas
import org.apache.uima.resource
import org.apache.uima.util
import typing



class ACETernReader(org.apache.uima.collection.CollectionReader_ImplBase):
    numberOfDocuments: int = ...
    PARAM_INPUTDIR: typing.ClassVar[str] = ...
    PARAM_DCT: typing.ClassVar[str] = ...
    annotateDCT: bool = ...
    def __init__(self): ...
    def close(self) -> None: ...
    @staticmethod
    def findMatches(pattern: java.util.regex.Pattern, charSequence: typing.Union[java.lang.CharSequence, str]) -> java.lang.Iterable[java.util.regex.MatchResult]: ...
    def getNext(self, cAS: org.apache.uima.cas.CAS) -> None: ...
    def getNumberOfDocuments(self) -> int: ...
    def getProgress(self) -> typing.MutableSequence[org.apache.uima.util.Progress]: ...
    def hasNext(self) -> bool: ...
    @typing.overload
    def initialize(self, resourceSpecifier: org.apache.uima.resource.ResourceSpecifier, map: typing.Union[java.util.Map[str, typing.Any], typing.Mapping[str, typing.Any]]) -> bool: ...
    @typing.overload
    def initialize(self) -> None: ...
    def normDay(self, string: str) -> str: ...
    def normMonth(self, string: str) -> str: ...
    def setDCT(self, string: str, jCas: org.apache.uima.jcas.JCas, string2: str) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("de.unihd.dbs.uima.reader.aceternreader")``.

    ACETernReader: typing.Type[ACETernReader]
