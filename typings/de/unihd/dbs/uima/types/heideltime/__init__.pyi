
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import org.apache.uima.cas
import org.apache.uima.jcas
import org.apache.uima.jcas.cas
import org.apache.uima.jcas.tcas
import typing



class Dct(org.apache.uima.jcas.tcas.Annotation):
    typeIndexID: typing.ClassVar[int] = ...
    type: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, int: int, tOP_Type: org.apache.uima.jcas.cas.TOP_Type): ...
    @typing.overload
    def __init__(self, jCas: org.apache.uima.jcas.JCas): ...
    @typing.overload
    def __init__(self, jCas: org.apache.uima.jcas.JCas, int: int, int2: int): ...
    def getFilename(self) -> str: ...
    def getTimexId(self) -> str: ...
    def getTypeIndexID(self) -> int: ...
    def getValue(self) -> str: ...
    def setFilename(self, string: str) -> None: ...
    def setTimexId(self, string: str) -> None: ...
    def setValue(self, string: str) -> None: ...

class Dct_Type(org.apache.uima.jcas.tcas.Annotation_Type):
    typeIndexID: typing.ClassVar[int] = ...
    featOkTst: typing.ClassVar[bool] = ...
    def __init__(self, jCas: org.apache.uima.jcas.JCas, type: org.apache.uima.cas.Type): ...
    def getFilename(self, int: int) -> str: ...
    def getTimexId(self, int: int) -> str: ...
    def getValue(self, int: int) -> str: ...
    def setFilename(self, int: int, string: str) -> None: ...
    def setTimexId(self, int: int, string: str) -> None: ...
    def setValue(self, int: int, string: str) -> None: ...

class Event(org.apache.uima.jcas.tcas.Annotation):
    typeIndexID: typing.ClassVar[int] = ...
    type: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, int: int, tOP_Type: org.apache.uima.jcas.cas.TOP_Type): ...
    @typing.overload
    def __init__(self, jCas: org.apache.uima.jcas.JCas): ...
    @typing.overload
    def __init__(self, jCas: org.apache.uima.jcas.JCas, int: int, int2: int): ...
    def getAspect(self) -> str: ...
    def getEventId(self) -> str: ...
    def getEventInstanceId(self) -> int: ...
    def getFilename(self) -> str: ...
    def getModality(self) -> str: ...
    def getPolarity(self) -> str: ...
    def getSentId(self) -> int: ...
    def getTense(self) -> str: ...
    def getTokId(self) -> int: ...
    def getToken(self) -> 'Token': ...
    def getTypeIndexID(self) -> int: ...
    def setAspect(self, string: str) -> None: ...
    def setEventId(self, string: str) -> None: ...
    def setEventInstanceId(self, int: int) -> None: ...
    def setFilename(self, string: str) -> None: ...
    def setModality(self, string: str) -> None: ...
    def setPolarity(self, string: str) -> None: ...
    def setSentId(self, int: int) -> None: ...
    def setTense(self, string: str) -> None: ...
    def setTokId(self, int: int) -> None: ...
    def setToken(self, token: 'Token') -> None: ...

class Event_Type(org.apache.uima.jcas.tcas.Annotation_Type):
    typeIndexID: typing.ClassVar[int] = ...
    featOkTst: typing.ClassVar[bool] = ...
    def __init__(self, jCas: org.apache.uima.jcas.JCas, type: org.apache.uima.cas.Type): ...
    def getAspect(self, int: int) -> str: ...
    def getEventId(self, int: int) -> str: ...
    def getEventInstanceId(self, int: int) -> int: ...
    def getFilename(self, int: int) -> str: ...
    def getModality(self, int: int) -> str: ...
    def getPolarity(self, int: int) -> str: ...
    def getSentId(self, int: int) -> int: ...
    def getTense(self, int: int) -> str: ...
    def getTokId(self, int: int) -> int: ...
    def getToken(self, int: int) -> int: ...
    def setAspect(self, int: int, string: str) -> None: ...
    def setEventId(self, int: int, string: str) -> None: ...
    def setEventInstanceId(self, int: int, int2: int) -> None: ...
    def setFilename(self, int: int, string: str) -> None: ...
    def setModality(self, int: int, string: str) -> None: ...
    def setPolarity(self, int: int, string: str) -> None: ...
    def setSentId(self, int: int, int2: int) -> None: ...
    def setTense(self, int: int, string: str) -> None: ...
    def setTokId(self, int: int, int2: int) -> None: ...
    def setToken(self, int: int, int2: int) -> None: ...

class Sentence(org.apache.uima.jcas.tcas.Annotation):
    typeIndexID: typing.ClassVar[int] = ...
    type: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, int: int, tOP_Type: org.apache.uima.jcas.cas.TOP_Type): ...
    @typing.overload
    def __init__(self, jCas: org.apache.uima.jcas.JCas): ...
    @typing.overload
    def __init__(self, jCas: org.apache.uima.jcas.JCas, int: int, int2: int): ...
    def getFilename(self) -> str: ...
    def getSentenceId(self) -> int: ...
    def getTypeIndexID(self) -> int: ...
    def setFilename(self, string: str) -> None: ...
    def setSentenceId(self, int: int) -> None: ...

class Sentence_Type(org.apache.uima.jcas.tcas.Annotation_Type):
    typeIndexID: typing.ClassVar[int] = ...
    featOkTst: typing.ClassVar[bool] = ...
    def __init__(self, jCas: org.apache.uima.jcas.JCas, type: org.apache.uima.cas.Type): ...
    def getFilename(self, int: int) -> str: ...
    def getSentenceId(self, int: int) -> int: ...
    def setFilename(self, int: int, string: str) -> None: ...
    def setSentenceId(self, int: int, int2: int) -> None: ...

class SourceDocInfo(org.apache.uima.jcas.tcas.Annotation):
    typeIndexID: typing.ClassVar[int] = ...
    type: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, int: int, tOP_Type: org.apache.uima.jcas.cas.TOP_Type): ...
    @typing.overload
    def __init__(self, jCas: org.apache.uima.jcas.JCas): ...
    @typing.overload
    def __init__(self, jCas: org.apache.uima.jcas.JCas, int: int, int2: int): ...
    def getOffsetInSource(self) -> int: ...
    def getTypeIndexID(self) -> int: ...
    def getUri(self) -> str: ...
    def setOffsetInSource(self, int: int) -> None: ...
    def setUri(self, string: str) -> None: ...

class SourceDocInfo_Type(org.apache.uima.jcas.tcas.Annotation_Type):
    typeIndexID: typing.ClassVar[int] = ...
    featOkTst: typing.ClassVar[bool] = ...
    def __init__(self, jCas: org.apache.uima.jcas.JCas, type: org.apache.uima.cas.Type): ...
    def getOffsetInSource(self, int: int) -> int: ...
    def getUri(self, int: int) -> str: ...
    def setOffsetInSource(self, int: int, int2: int) -> None: ...
    def setUri(self, int: int, string: str) -> None: ...

class Timex3(org.apache.uima.jcas.tcas.Annotation):
    typeIndexID: typing.ClassVar[int] = ...
    type: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, int: int, tOP_Type: org.apache.uima.jcas.cas.TOP_Type): ...
    @typing.overload
    def __init__(self, jCas: org.apache.uima.jcas.JCas): ...
    @typing.overload
    def __init__(self, jCas: org.apache.uima.jcas.JCas, int: int, int2: int): ...
    def getAllTokIds(self) -> str: ...
    def getEmptyValue(self) -> str: ...
    def getFilename(self) -> str: ...
    def getFirstTokId(self) -> int: ...
    def getFoundByRule(self) -> str: ...
    def getSentId(self) -> int: ...
    def getTimexFreq(self) -> str: ...
    def getTimexId(self) -> str: ...
    def getTimexInstance(self) -> int: ...
    def getTimexMod(self) -> str: ...
    def getTimexQuant(self) -> str: ...
    def getTimexType(self) -> str: ...
    def getTimexValue(self) -> str: ...
    def getTypeIndexID(self) -> int: ...
    def setAllTokIds(self, string: str) -> None: ...
    def setEmptyValue(self, string: str) -> None: ...
    def setFilename(self, string: str) -> None: ...
    def setFirstTokId(self, int: int) -> None: ...
    def setFoundByRule(self, string: str) -> None: ...
    def setSentId(self, int: int) -> None: ...
    def setTimexFreq(self, string: str) -> None: ...
    def setTimexId(self, string: str) -> None: ...
    def setTimexInstance(self, int: int) -> None: ...
    def setTimexMod(self, string: str) -> None: ...
    def setTimexQuant(self, string: str) -> None: ...
    def setTimexType(self, string: str) -> None: ...
    def setTimexValue(self, string: str) -> None: ...

class Timex3_Type(org.apache.uima.jcas.tcas.Annotation_Type):
    typeIndexID: typing.ClassVar[int] = ...
    featOkTst: typing.ClassVar[bool] = ...
    def __init__(self, jCas: org.apache.uima.jcas.JCas, type: org.apache.uima.cas.Type): ...
    def getAllTokIds(self, int: int) -> str: ...
    def getEmptyValue(self, int: int) -> str: ...
    def getFilename(self, int: int) -> str: ...
    def getFirstTokId(self, int: int) -> int: ...
    def getFoundByRule(self, int: int) -> str: ...
    def getSentId(self, int: int) -> int: ...
    def getTimexFreq(self, int: int) -> str: ...
    def getTimexId(self, int: int) -> str: ...
    def getTimexInstance(self, int: int) -> int: ...
    def getTimexMod(self, int: int) -> str: ...
    def getTimexQuant(self, int: int) -> str: ...
    def getTimexType(self, int: int) -> str: ...
    def getTimexValue(self, int: int) -> str: ...
    def setAllTokIds(self, int: int, string: str) -> None: ...
    def setEmptyValue(self, int: int, string: str) -> None: ...
    def setFilename(self, int: int, string: str) -> None: ...
    def setFirstTokId(self, int: int, int2: int) -> None: ...
    def setFoundByRule(self, int: int, string: str) -> None: ...
    def setSentId(self, int: int, int2: int) -> None: ...
    def setTimexFreq(self, int: int, string: str) -> None: ...
    def setTimexId(self, int: int, string: str) -> None: ...
    def setTimexInstance(self, int: int, int2: int) -> None: ...
    def setTimexMod(self, int: int, string: str) -> None: ...
    def setTimexQuant(self, int: int, string: str) -> None: ...
    def setTimexType(self, int: int, string: str) -> None: ...
    def setTimexValue(self, int: int, string: str) -> None: ...

class Token(org.apache.uima.jcas.tcas.Annotation):
    typeIndexID: typing.ClassVar[int] = ...
    type: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, int: int, tOP_Type: org.apache.uima.jcas.cas.TOP_Type): ...
    @typing.overload
    def __init__(self, jCas: org.apache.uima.jcas.JCas): ...
    @typing.overload
    def __init__(self, jCas: org.apache.uima.jcas.JCas, int: int, int2: int): ...
    def getFilename(self) -> str: ...
    def getPos(self) -> str: ...
    def getSentId(self) -> int: ...
    def getTokenId(self) -> int: ...
    def getTypeIndexID(self) -> int: ...
    def setFilename(self, string: str) -> None: ...
    def setPos(self, string: str) -> None: ...
    def setSentId(self, int: int) -> None: ...
    def setTokenId(self, int: int) -> None: ...

class Token_Type(org.apache.uima.jcas.tcas.Annotation_Type):
    typeIndexID: typing.ClassVar[int] = ...
    featOkTst: typing.ClassVar[bool] = ...
    def __init__(self, jCas: org.apache.uima.jcas.JCas, type: org.apache.uima.cas.Type): ...
    def getFilename(self, int: int) -> str: ...
    def getPos(self, int: int) -> str: ...
    def getSentId(self, int: int) -> int: ...
    def getTokenId(self, int: int) -> int: ...
    def setFilename(self, int: int, string: str) -> None: ...
    def setPos(self, int: int, string: str) -> None: ...
    def setSentId(self, int: int, int2: int) -> None: ...
    def setTokenId(self, int: int, int2: int) -> None: ...

class GoldEvent(Event):
    typeIndexID: typing.ClassVar[int] = ...
    type: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, int: int, tOP_Type: org.apache.uima.jcas.cas.TOP_Type): ...
    @typing.overload
    def __init__(self, jCas: org.apache.uima.jcas.JCas): ...
    @typing.overload
    def __init__(self, jCas: org.apache.uima.jcas.JCas, int: int, int2: int): ...
    def getTypeIndexID(self) -> int: ...

class GoldEvent_Type(Event_Type):
    typeIndexID: typing.ClassVar[int] = ...
    featOkTst: typing.ClassVar[bool] = ...
    def __init__(self, jCas: org.apache.uima.jcas.JCas, type: org.apache.uima.cas.Type): ...

class IntervalCandidateSentence(Sentence):
    typeIndexID: typing.ClassVar[int] = ...
    type: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, int: int, tOP_Type: org.apache.uima.jcas.cas.TOP_Type): ...
    @typing.overload
    def __init__(self, jCas: org.apache.uima.jcas.JCas): ...
    @typing.overload
    def __init__(self, jCas: org.apache.uima.jcas.JCas, int: int, int2: int): ...
    def getTypeIndexID(self) -> int: ...

class IntervalCandidateSentence_Type(Sentence_Type):
    typeIndexID: typing.ClassVar[int] = ...
    featOkTst: typing.ClassVar[bool] = ...
    def __init__(self, jCas: org.apache.uima.jcas.JCas, type: org.apache.uima.cas.Type): ...

class Timex3Interval(Timex3):
    typeIndexID: typing.ClassVar[int] = ...
    type: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, int: int, tOP_Type: org.apache.uima.jcas.cas.TOP_Type): ...
    @typing.overload
    def __init__(self, jCas: org.apache.uima.jcas.JCas): ...
    @typing.overload
    def __init__(self, jCas: org.apache.uima.jcas.JCas, int: int, int2: int): ...
    def getBeginTimex(self) -> str: ...
    def getEmptyValue(self) -> str: ...
    def getEndTimex(self) -> str: ...
    def getTimexValueEB(self) -> str: ...
    def getTimexValueEE(self) -> str: ...
    def getTimexValueLB(self) -> str: ...
    def getTimexValueLE(self) -> str: ...
    def getTypeIndexID(self) -> int: ...
    def setBeginTimex(self, string: str) -> None: ...
    def setEmptyValue(self, string: str) -> None: ...
    def setEndTimex(self, string: str) -> None: ...
    def setTimexValueEB(self, string: str) -> None: ...
    def setTimexValueEE(self, string: str) -> None: ...
    def setTimexValueLB(self, string: str) -> None: ...
    def setTimexValueLE(self, string: str) -> None: ...

class Timex3Interval_Type(Timex3_Type):
    typeIndexID: typing.ClassVar[int] = ...
    featOkTst: typing.ClassVar[bool] = ...
    def __init__(self, jCas: org.apache.uima.jcas.JCas, type: org.apache.uima.cas.Type): ...
    def getBeginTimex(self, int: int) -> str: ...
    def getEmptyValue(self, int: int) -> str: ...
    def getEndTimex(self, int: int) -> str: ...
    def getTimexValueEB(self, int: int) -> str: ...
    def getTimexValueEE(self, int: int) -> str: ...
    def getTimexValueLB(self, int: int) -> str: ...
    def getTimexValueLE(self, int: int) -> str: ...
    def setBeginTimex(self, int: int, string: str) -> None: ...
    def setEmptyValue(self, int: int, string: str) -> None: ...
    def setEndTimex(self, int: int, string: str) -> None: ...
    def setTimexValueEB(self, int: int, string: str) -> None: ...
    def setTimexValueEE(self, int: int, string: str) -> None: ...
    def setTimexValueLB(self, int: int, string: str) -> None: ...
    def setTimexValueLE(self, int: int, string: str) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("de.unihd.dbs.uima.types.heideltime")``.

    Dct: typing.Type[Dct]
    Dct_Type: typing.Type[Dct_Type]
    Event: typing.Type[Event]
    Event_Type: typing.Type[Event_Type]
    GoldEvent: typing.Type[GoldEvent]
    GoldEvent_Type: typing.Type[GoldEvent_Type]
    IntervalCandidateSentence: typing.Type[IntervalCandidateSentence]
    IntervalCandidateSentence_Type: typing.Type[IntervalCandidateSentence_Type]
    Sentence: typing.Type[Sentence]
    Sentence_Type: typing.Type[Sentence_Type]
    SourceDocInfo: typing.Type[SourceDocInfo]
    SourceDocInfo_Type: typing.Type[SourceDocInfo_Type]
    Timex3: typing.Type[Timex3]
    Timex3Interval: typing.Type[Timex3Interval]
    Timex3Interval_Type: typing.Type[Timex3Interval_Type]
    Timex3_Type: typing.Type[Timex3_Type]
    Token: typing.Type[Token]
    Token_Type: typing.Type[Token_Type]
