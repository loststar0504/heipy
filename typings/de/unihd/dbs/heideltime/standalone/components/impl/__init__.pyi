
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import de.unihd.dbs.heideltime.standalone
import de.unihd.dbs.heideltime.standalone.components
import de.unihd.dbs.uima.annotator.heideltime.resources
import java.io
import java.lang
import java.net
import java.util
import java.util.regex
import jpype
import org.apache.uima
import org.apache.uima.cas
import org.apache.uima.impl
import org.apache.uima.jcas
import org.apache.uima.resource
import org.apache.uima.resource.metadata
import org.apache.uima.util
import typing



class AllLanguagesTokenizerWrapper(de.unihd.dbs.heideltime.standalone.components.PartOfSpeechTagger):
    def __init__(self): ...
    def initialize(self, properties: java.util.Properties) -> None: ...
    def process(self, jCas: org.apache.uima.jcas.JCas) -> None: ...
    def reset(self) -> None: ...

class HunPosTaggerWrapper(de.unihd.dbs.heideltime.standalone.components.PartOfSpeechTagger):
    def __init__(self): ...
    def initialize(self, properties: java.util.Properties) -> None: ...
    def process(self, jCas: org.apache.uima.jcas.JCas) -> None: ...
    def reset(self) -> None: ...

class IntervalTaggerWrapper(de.unihd.dbs.heideltime.standalone.components.UIMAAnnotator):
    def __init__(self): ...
    def initialize(self, properties: java.util.Properties) -> None: ...
    def process(self, jCas: org.apache.uima.jcas.JCas) -> None: ...

class JCasFactoryImpl(de.unihd.dbs.heideltime.standalone.components.JCasFactory):
    def __init__(self, typeSystemDescriptionArray: typing.Union[typing.List[org.apache.uima.resource.metadata.TypeSystemDescription], jpype.JArray]): ...
    def createJCas(self) -> org.apache.uima.jcas.JCas: ...

class JVnTextProWrapper(de.unihd.dbs.heideltime.standalone.components.PartOfSpeechTagger):
    def __init__(self): ...
    def initialize(self, properties: java.util.Properties) -> None: ...
    def process(self, jCas: org.apache.uima.jcas.JCas) -> None: ...
    def reset(self) -> None: ...

class StandaloneConfigContext(org.apache.uima.UimaContext):
    def __init__(self): ...
    @typing.overload
    def getConfigParameterNames(self) -> typing.MutableSequence[str]: ...
    @typing.overload
    def getConfigParameterNames(self, string: str) -> typing.MutableSequence[str]: ...
    @typing.overload
    def getConfigParameterValue(self, string: str) -> typing.Any: ...
    @typing.overload
    def getConfigParameterValue(self, string: str, string2: str) -> typing.Any: ...
    def getConfigurationGroupNames(self) -> typing.MutableSequence[str]: ...
    def getDataPath(self) -> str: ...
    def getEmptyCas(self, class_: typing.Type) -> org.apache.uima.cas.AbstractCas: ...
    def getInstrumentationFacility(self) -> org.apache.uima.util.InstrumentationFacility: ...
    def getLogger(self) -> org.apache.uima.util.Logger: ...
    @typing.overload
    def getResourceAsStream(self, string: str) -> java.io.InputStream: ...
    @typing.overload
    def getResourceAsStream(self, string: str, stringArray: typing.Union[typing.List[str], jpype.JArray]) -> java.io.InputStream: ...
    @typing.overload
    def getResourceFilePath(self, string: str) -> str: ...
    @typing.overload
    def getResourceFilePath(self, string: str, stringArray: typing.Union[typing.List[str], jpype.JArray]) -> str: ...
    @typing.overload
    def getResourceObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def getResourceObject(self, string: str, stringArray: typing.Union[typing.List[str], jpype.JArray]) -> typing.Any: ...
    @typing.overload
    def getResourceURI(self, string: str) -> java.net.URI: ...
    @typing.overload
    def getResourceURI(self, string: str, stringArray: typing.Union[typing.List[str], jpype.JArray]) -> java.net.URI: ...
    @typing.overload
    def getResourceURL(self, string: str) -> java.net.URL: ...
    @typing.overload
    def getResourceURL(self, string: str, stringArray: typing.Union[typing.List[str], jpype.JArray]) -> java.net.URL: ...
    def getSession(self) -> org.apache.uima.resource.Session: ...
    def getSofaMappings(self) -> typing.MutableSequence[org.apache.uima.cas.SofaID]: ...
    def mapSofaIDToComponentSofaName(self, string: str) -> str: ...
    def mapToSofaID(self, string: str) -> org.apache.uima.cas.SofaID: ...
    def setConfigParameterValue(self, string: str, object: typing.Any) -> None: ...

class StanfordPOSTaggerWrapper(de.unihd.dbs.heideltime.standalone.components.PartOfSpeechTagger):
    def __init__(self): ...
    def initialize(self, properties: java.util.Properties) -> None: ...
    def process(self, jCas: org.apache.uima.jcas.JCas) -> None: ...
    def reset(self) -> None: ...

class TimeMLResultFormatter(de.unihd.dbs.heideltime.standalone.components.ResultFormatter):
    def __init__(self): ...
    def format(self, jCas: org.apache.uima.jcas.JCas) -> str: ...

class TreeTaggerWrapper(de.unihd.dbs.heideltime.standalone.components.PartOfSpeechTagger):
    def __init__(self): ...
    @typing.overload
    def initialize(self, language: de.unihd.dbs.uima.annotator.heideltime.resources.Language, boolean: bool, boolean2: bool, boolean3: bool, boolean4: bool) -> None: ...
    @typing.overload
    def initialize(self, properties: java.util.Properties) -> None: ...
    def process(self, jCas: org.apache.uima.jcas.JCas) -> None: ...
    def reset(self) -> None: ...

class UimaContextImpl(org.apache.uima.impl.RootUimaContext_impl):
    def __init__(self, language: de.unihd.dbs.uima.annotator.heideltime.resources.Language, documentType: de.unihd.dbs.heideltime.standalone.DocumentType, boolean: bool): ...
    def getConfigurationManager(self) -> org.apache.uima.resource.ConfigurationManager: ...

class XMIResultFormatter(de.unihd.dbs.heideltime.standalone.components.ResultFormatter):
    def __init__(self): ...
    @staticmethod
    def findMatches(pattern: java.util.regex.Pattern, charSequence: typing.Union[java.lang.CharSequence, str]) -> java.lang.Iterable[java.util.regex.MatchResult]: ...
    def format(self, jCas: org.apache.uima.jcas.JCas) -> str: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("de.unihd.dbs.heideltime.standalone.components.impl")``.

    AllLanguagesTokenizerWrapper: typing.Type[AllLanguagesTokenizerWrapper]
    HunPosTaggerWrapper: typing.Type[HunPosTaggerWrapper]
    IntervalTaggerWrapper: typing.Type[IntervalTaggerWrapper]
    JCasFactoryImpl: typing.Type[JCasFactoryImpl]
    JVnTextProWrapper: typing.Type[JVnTextProWrapper]
    StandaloneConfigContext: typing.Type[StandaloneConfigContext]
    StanfordPOSTaggerWrapper: typing.Type[StanfordPOSTaggerWrapper]
    TimeMLResultFormatter: typing.Type[TimeMLResultFormatter]
    TreeTaggerWrapper: typing.Type[TreeTaggerWrapper]
    UimaContextImpl: typing.Type[UimaContextImpl]
    XMIResultFormatter: typing.Type[XMIResultFormatter]
