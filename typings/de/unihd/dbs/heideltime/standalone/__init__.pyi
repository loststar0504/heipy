
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import de.unihd.dbs.heideltime.standalone.components
import de.unihd.dbs.heideltime.standalone.exceptions
import de.unihd.dbs.uima.annotator.heideltime.resources
import java.lang
import java.util
import jpype
import typing



class CLISwitch(java.lang.Enum['CLISwitch']):
    VERBOSITY: typing.ClassVar['CLISwitch'] = ...
    VERBOSITY2: typing.ClassVar['CLISwitch'] = ...
    ENCODING: typing.ClassVar['CLISwitch'] = ...
    OUTPUTTYPE: typing.ClassVar['CLISwitch'] = ...
    LANGUAGE: typing.ClassVar['CLISwitch'] = ...
    DOCTYPE: typing.ClassVar['CLISwitch'] = ...
    DCT: typing.ClassVar['CLISwitch'] = ...
    CONFIGFILE: typing.ClassVar['CLISwitch'] = ...
    LOCALE: typing.ClassVar['CLISwitch'] = ...
    POSTAGGER: typing.ClassVar['CLISwitch'] = ...
    INTERVALS: typing.ClassVar['CLISwitch'] = ...
    HELP: typing.ClassVar['CLISwitch'] = ...
    def getDefaultValue(self) -> typing.Any: ...
    @staticmethod
    def getEnumFromSwitch(string: str) -> 'CLISwitch': ...
    def getHasFollowingValue(self) -> bool: ...
    def getIsActive(self) -> bool: ...
    def getName(self) -> str: ...
    def getSwitchString(self) -> str: ...
    def getValue(self) -> typing.Any: ...
    def setValue(self, string: str) -> None: ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'CLISwitch': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.MutableSequence['CLISwitch']: ...

class Config:
    DEBUG: typing.ClassVar[str] = ...
    CONSIDER_DATE: typing.ClassVar[str] = ...
    CONSIDER_DURATION: typing.ClassVar[str] = ...
    CONSIDER_SET: typing.ClassVar[str] = ...
    CONSIDER_TIME: typing.ClassVar[str] = ...
    CONSIDER_TEMPONYM: typing.ClassVar[str] = ...
    TREETAGGERHOME: typing.ClassVar[str] = ...
    CHINESE_TOKENIZER_PATH: typing.ClassVar[str] = ...
    JVNTEXTPRO_WORD_MODEL_PATH: typing.ClassVar[str] = ...
    JVNTEXTPRO_SENT_MODEL_PATH: typing.ClassVar[str] = ...
    JVNTEXTPRO_POS_MODEL_PATH: typing.ClassVar[str] = ...
    STANFORDPOSTAGGER_MODEL_PATH: typing.ClassVar[str] = ...
    STANFORDPOSTAGGER_CONFIG_PATH: typing.ClassVar[str] = ...
    HUNPOS_PATH: typing.ClassVar[str] = ...
    HUNPOS_MODEL_PATH: typing.ClassVar[str] = ...
    TYPESYSTEMHOME: typing.ClassVar[str] = ...
    TYPESYSTEMHOME_DKPRO: typing.ClassVar[str] = ...
    UIMAVAR_DATE: typing.ClassVar[str] = ...
    UIMAVAR_DURATION: typing.ClassVar[str] = ...
    UIMAVAR_LANGUAGE: typing.ClassVar[str] = ...
    UIMAVAR_SET: typing.ClassVar[str] = ...
    UIMAVAR_TEMPONYM: typing.ClassVar[str] = ...
    UIMAVAR_TIME: typing.ClassVar[str] = ...
    UIMAVAR_TYPETOPROCESS: typing.ClassVar[str] = ...
    UIMAVAR_CONVERTDURATIONS: typing.ClassVar[str] = ...
    @staticmethod
    def get(string: str) -> str: ...
    @staticmethod
    def isInitialized() -> bool: ...
    @staticmethod
    def setProps(properties: java.util.Properties) -> None: ...

class DocumentType(java.lang.Enum['DocumentType']):
    NARRATIVES: typing.ClassVar['DocumentType'] = ...
    NEWS: typing.ClassVar['DocumentType'] = ...
    COLLOQUIAL: typing.ClassVar['DocumentType'] = ...
    SCIENTIFIC: typing.ClassVar['DocumentType'] = ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'DocumentType': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.MutableSequence['DocumentType']: ...

class HeidelTimeStandalone:
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, language: de.unihd.dbs.uima.annotator.heideltime.resources.Language, documentType: DocumentType, outputType: 'OutputType'): ...
    @typing.overload
    def __init__(self, language: de.unihd.dbs.uima.annotator.heideltime.resources.Language, documentType: DocumentType, outputType: 'OutputType', string: str): ...
    @typing.overload
    def __init__(self, language: de.unihd.dbs.uima.annotator.heideltime.resources.Language, documentType: DocumentType, outputType: 'OutputType', string: str, POSTagger: 'POSTagger'): ...
    @typing.overload
    def __init__(self, language: de.unihd.dbs.uima.annotator.heideltime.resources.Language, documentType: DocumentType, outputType: 'OutputType', string: str, POSTagger: 'POSTagger', doIntervalTagging: bool): ...
    def getDocumentType(self) -> DocumentType: ...
    def getLanguage(self) -> de.unihd.dbs.uima.annotator.heideltime.resources.Language: ...
    def getOutputType(self) -> 'OutputType': ...
    def getPosTagger(self) -> 'POSTagger': ...
    @typing.overload
    def initialize(self, language: de.unihd.dbs.uima.annotator.heideltime.resources.Language, documentType: DocumentType, outputType: 'OutputType', string: str) -> None: ...
    @typing.overload
    def initialize(self, language: de.unihd.dbs.uima.annotator.heideltime.resources.Language, documentType: DocumentType, outputType: 'OutputType', string: str, POSTagger: 'POSTagger') -> None: ...
    @typing.overload
    def initialize(self, language: de.unihd.dbs.uima.annotator.heideltime.resources.Language, documentType: DocumentType, outputType: 'OutputType', string: str, POSTagger: 'POSTagger', doIntervalTagging: bool) -> None: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    @typing.overload
    def process(self, string: str) -> str: ...
    @typing.overload
    def process(self, string: str, resultFormatter: typing.Union[de.unihd.dbs.heideltime.standalone.components.ResultFormatter, typing.Callable]) -> str: ...
    @typing.overload
    def process(self, string: str, date: java.util.Date) -> str: ...
    @typing.overload
    def process(self, string: str, date: java.util.Date, resultFormatter: typing.Union[de.unihd.dbs.heideltime.standalone.components.ResultFormatter, typing.Callable]) -> str: ...
    @staticmethod
    def readConfigFile(string: str) -> None: ...
    def setDocumentType(self, documentType: DocumentType) -> None: ...
    def setLanguage(self, language: de.unihd.dbs.uima.annotator.heideltime.resources.Language) -> None: ...
    def setOutputType(self, outputType: 'OutputType') -> None: ...
    def setPosTagger(self, POSTagger: 'POSTagger') -> None: ...

class OutputType(java.lang.Enum['OutputType']):
    TIMEML: typing.ClassVar['OutputType'] = ...
    XMI: typing.ClassVar['OutputType'] = ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'OutputType': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.MutableSequence['OutputType']: ...

class POSTagger(java.lang.Enum['POSTagger']):
    STANFORDPOSTAGGER: typing.ClassVar['POSTagger'] = ...
    TREETAGGER: typing.ClassVar['POSTagger'] = ...
    HUNPOS: typing.ClassVar['POSTagger'] = ...
    NO: typing.ClassVar['POSTagger'] = ...
    _valueOf_1__T = typing.TypeVar('_valueOf_1__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'POSTagger': ...
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_1__T], string: str) -> _valueOf_1__T: ...
    @staticmethod
    def values() -> typing.MutableSequence['POSTagger']: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("de.unihd.dbs.heideltime.standalone")``.

    CLISwitch: typing.Type[CLISwitch]
    Config: typing.Type[Config]
    DocumentType: typing.Type[DocumentType]
    HeidelTimeStandalone: typing.Type[HeidelTimeStandalone]
    OutputType: typing.Type[OutputType]
    POSTagger: typing.Type[POSTagger]
    components: de.unihd.dbs.heideltime.standalone.components.__module_protocol__
    exceptions: de.unihd.dbs.heideltime.standalone.exceptions.__module_protocol__
